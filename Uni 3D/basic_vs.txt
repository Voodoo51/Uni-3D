#version 410 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aUV;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

uniform int lightPosCount;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec3 normal;
out vec3 fragPos;
out vec2 uv;

out vec3 tangentLightPos;
out vec3 tangentViewPos;
out vec3 tangentFragPos;

void main()
{
    fragPos = vec3(model * vec4(aPos, 1.0));
	normal = mat3(transpose(inverse(model))) * aNormal;
	uv = aUV;

	//mat3 normalMatrix = transpose(inverse(mat3(model)));
    //vec3 T = normalize(normalMatrix * aTangent);
    //vec3 N = normalize(normalMatrix * aNormal);
    //T = normalize(T - dot(T, N) * N);
    //vec3 B = cross(N, T);
    
    vec3 T = normalize(mat3(model) * aTangent);
    vec3 B = normalize(mat3(model) * aBitangent);
    vec3 N = normalize(mat3(model) * aNormal);

    //vec3 T = vec3(1.0, 0.0, 0.0);
    //vec3 B = vec3(0.0, 1.0, 0.0);
    //vec3 N = vec3(0.0, 0.0, 1.0);
    mat3 TBN = transpose(mat3(T, B, N));

    //this needs to change
    tangentLightPos = TBN * lightPos;
    tangentViewPos  = TBN * viewPos;
    tangentFragPos  = TBN * fragPos;

	gl_Position = projection * view * model * vec4(aPos, 1.0);

}