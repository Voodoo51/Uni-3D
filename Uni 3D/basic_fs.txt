#version 410 core
out vec4 FragColor;

struct Material
{
  vec3 color;
  float shininess;
};

struct DirLight
{
  vec3 direction;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct PointLight
{
  vec3 position;
  
  float constant;
  float linear;
  float quadratic;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

#define MAX_POINT_LIGHTS 8

uniform DirLight dirLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform int pointLightsCount;
uniform vec3 viewPos;
uniform Material material;
uniform sampler2D albedo;
uniform sampler2D specular;
uniform sampler2D normalMap;
uniform sampler2D heightMap;
uniform float heightScale;

in vec3 normal;
in vec3 fragPos;
in vec2 uv;

in vec3 tangentLightPos;
in vec3 tangentViewPos;
in vec3 tangentFragPos;

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * heightScale; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(heightMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(heightMap, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = texture(heightMap, prevTexCoords).r - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec2 texCoords = uv;//ParallaxMapping(uv,  viewDir);
    if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
    {
        discard;
    }

    vec3 lightDir = normalize(-light.direction);
    vec3 normal1 = normalize(vec3(texture(normalMap, texCoords) * 2.0 - 1.0));

    // diffuse shading
    float diff = max(dot(normal1, lightDir), 0.0);
    //float diff = max(dot(normal, lightDir), 0.0);

    //Blinn-Phong specular shading
    //viewDir = normalize(tangentViewPos - tangentFragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    //vec3 reflectDir = reflect(-lightDir, _normal);
    //float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);
    float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = light.ambient * vec3(texture(albedo, texCoords));
    //vec3 ambient  = light.ambient  * material.diffuse * vec3(texture(texture1, texCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(albedo, texCoords));
    vec3 specular = light.specular * spec * vec3(texture(specular, texCoords));
    return (ambient + diffuse + specular) * material.color;
}  

vec3 CalcPointLight(PointLight light, vec3 _normal, vec3 viewDir)
{
    vec2 texCoords = uv;//ParallaxMapping(uv, viewDir);
    if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
    {
        discard;
    }
    //vec3 lightDir = normalize(light.position - fragPos);
    vec3 lightDir = normalize(tangentLightPos - tangentFragPos);

    // diffuse shading
    vec3 normal1 = normalize(texture(normalMap, texCoords).rgb * 2.0 - 1.0);
    float diff = max(dot(normal1, lightDir), 0.0);
    //float diff = max(dot(_normal, lightDir), 0.0);

    //Blinn-Phong specular shading
    vec3 halfwayDir = normalize(lightDir + viewDir);
    //vec3 reflectDir = reflect(-lightDir, _normal);
    float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);
    //float spec = pow(max(dot(normal1, halfwayDir), 0.0), material.shininess);

    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient  * (1.0 * vec3(texture(albedo, texCoords)));
    vec3 diffuse  = light.diffuse  * (diff * vec3(texture(albedo, texCoords)));
    //vec3 specular = light.specular * (spec * vec3(texture(specular, texCoords)));
    vec3 specular = light.specular * (spec * vec3(texture(albedo, texCoords)));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular) * material.color;
}

void main()
{
    vec3 norm = normalize(normal);
    vec3 viewDir = normalize(viewPos - fragPos);

    vec3 result = vec3(0,0,0);

    result += CalcDirLight(dirLight, norm, viewDir);
    viewDir = normalize(tangentViewPos - tangentFragPos);

    for(int i = 0; i < pointLightsCount; i++)
    {
        result += CalcPointLight(pointLights[i], norm, viewDir);
    }

    //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
	FragColor = vec4(result, 1.0);
}